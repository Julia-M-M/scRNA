sce.psa <- DropletUtils::read10xCounts("data_t")
setwd("~/Desktop/PROJECTES/Pablo_scRNA/test")
sce.psa <- DropletUtils::read10xCounts("data_t")
sce.psa
setwd("~/Desktop/PROJECTES/Pablo_scRNA/data/psa_9492")
sce.psa <- DropletUtils::read10xCounts("processed_data_9492")
setwd("~/Desktop/PROJECTES/Pablo_scRNA/test")
sce.psa <- DropletUtils::read10xCounts("data_t")
sce.psa
rownames(sce.psa) <- uniquifyFeatureNames(rowData(sce.psa)$ID, rowData(sce.psa)$Symbol)
library(scRNAseq) ## para descargar datos de ejemplo
library(DropletUtils) ## para detectar droplets
library(Matrix) ## para leer datos en formatos comprimidos
library(AnnotationHub) ## para obtener información de genes
library(scater) ## para gráficas y control de calidad
library(BiocFileCache) ## para descargar datos
library(EnsDb.Hsapiens.v86) ## Archivo de anotacion en humanos en Ensembl
library(dplyr) ## Modificacion de archivos dataframe
library(scran)
rownames(sce.psa) <- uniquifyFeatureNames(rowData(sce.psa)$ID, rowData(sce.psa)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86,
keys = rowData(sce.psa)$ID,
column = "SEQNAME", keytype = "GENEID"
)
stats <- perCellQCMetrics(sce.psa,
subsets = list(Mito = which(location == "MT"))
)
high.mito <- isOutlier(stats$subsets_Mito_percent,
type = "higher"
)
sce.psa <- sce.psa[, !high.mito]
sce.psa
set.seed(100)
clusters <- quickCluster(sce.psa)
sce.psa <- computeSumFactors(sce.psa, cluster = clusters)
sce.psa <- logNormCounts(sce.psa)
sce.psa
set.seed(100)
dec.bmcell <- modelGeneVarByPoisson(sce.psa)
top.bmcell <- getTopHVGs(dec.bmcell, prop = 0.1)
set.seed(10000)
sce.psa <- denoisePCA(sce.psa,
subset.row = top.bmcell,
technical = dec.bmcell
)
set.seed(100000)
sce.psa <- runTSNE(sce.psa, dimred = "PCA")
set.seed(1000000)
sce.psa <- runUMAP(sce.psa, dimred = "PCA")
g2 <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA", type = "jaccard")
clust2 <- igraph::cluster_louvain(g2)$membership
sce.psa$cluster2 <- factor(clust2)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
g <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA")
# Identificar comunidades utilizando el método Walktrap
clust <- igraph::cluster_walktrap(g)$membership
# Visualización
sce.psa$cluster <- factor(clust)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster")
library("patchwork")
## Estilo scran vs estilo Seurat
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
library(bluster)
# obteniendo la métrica de modularidad
ratio <- pairwiseModularity(g, clust, as.ratio = TRUE)
dim(ratio)
library(pheatmap)
pheatmap(log2(ratio + 1),
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("white", "blue"))(100)
)
plotExpression(sce.psa,
features = c("CD8B", "CD8A", "CD3D", "TMSB10", "HCST", "CD3G", "LINC02446", "CTSW", "CD3E", "TRAC"),
x = "clust.full", colour_by = "clust.full"
)
plotExpression(sce.psa,
features = c("CD8B", "CD8A", "CD3D", "TMSB10", "HCST", "CD3G", "CTSW", "CD3E", "TRAC"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_walktrap(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotExpression(sce.psa,
features = c("CD8B", "CD8A", "CD3D", "TMSB10", "HCST", "CD3G", "CTSW", "CD3E", "TRAC"),
x = "clust.full", colour_by = "clust.full"
)
plotExpression(sce.psa,
features = c("CD8", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
sce.psa
View(sce.psa)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full.seurat <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full.seurat <- igraph::cluster_louvain(g.full.seurat)$membership
sce.psa$clust.full.seurat <- factor(clust.full.seurat)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full.seurat", colour_by = "clust.full.seurat"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA-4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_walktrap(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
#features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
#features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
####
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "UMAP", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
setwd("~/Desktop/PROJECTES/Pablo_scRNA/test")
sce.psa <- DropletUtils::read10xCounts("data_t")
sce.psa
# Anotación: Se cambia los nombre de los genes, es decir, MIR1302-2HG en vez de ENSG00000243485
rownames(sce.psa) <- uniquifyFeatureNames(rowData(sce.psa)$ID, rowData(sce.psa)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86,
keys = rowData(sce.psa)$ID,
column = "SEQNAME", keytype = "GENEID"
)
stats <- perCellQCMetrics(sce.psa,
subsets = list(Mito = which(location == "MT"))
)
high.mito <- isOutlier(stats$subsets_Mito_percent,
type = "higher"
)
sce.psa <- sce.psa[, !high.mito]
sce.psa
set.seed(100)
clusters <- quickCluster(sce.psa)
sce.psa <- computeSumFactors(sce.psa, cluster = clusters)
sce.psa <- logNormCounts(sce.psa)
sce.psa
set.seed(100)
dec.bmcell <- modelGeneVarByPoisson(sce.psa)
top.bmcell <- getTopHVGs(dec.bmcell, prop = 0.1)
set.seed(10000)
sce.psa <- denoisePCA(sce.psa,
subset.row = top.bmcell,
technical = dec.bmcell
)
set.seed(100000)
sce.psa <- runTSNE(sce.psa, dimred = "PCA")
set.seed(1000000)
sce.psa <- runUMAP(sce.psa, dimred = "PCA")
g <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA")
# Identificar comunidades utilizando el método Walktrap
clust <- igraph::cluster_walktrap(g)$membership
# Visualización
sce.psa$cluster <- factor(clust)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster")
####
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_walktrap(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "UMAP", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
g2 <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA", type = "jaccard")
clust2 <- igraph::cluster_louvain(g2)$membership
sce.psa$cluster2 <- factor(clust2)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "UMAP", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "UMAP", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
library(scRNAseq) ## para descargar datos de ejemplo
library(DropletUtils) ## para detectar droplets
library(Matrix) ## para leer datos en formatos comprimidos
library(AnnotationHub) ## para obtener información de genes
library(scater) ## para gráficas y control de calidad
library(BiocFileCache) ## para descargar datos
library(EnsDb.Hsapiens.v86) ## Archivo de anotacion en humanos en Ensembl
library(dplyr) ## Modificacion de archivos dataframe
library(scran)
setwd("~/Desktop/PROJECTES/Pablo_scRNA/test")
sce.psa <- DropletUtils::read10xCounts("data_t")
sce.psa
rownames(sce.psa) <- uniquifyFeatureNames(rowData(sce.psa)$ID, rowData(sce.psa)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86, keys = rowData(sce.psa)$ID, column = "SEQNAME", keytype = "GENEID")
stats <- perCellQCMetrics(sce.psa, subsets = list(Mito = which(location == "MT")))
high.mito <- isOutlier(stats$subsets_Mito_percent, type = "higher")
sce.psa <- sce.psa[, !high.mito]
sce.psa
g <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA")
clusters <- quickCluster(sce.psa)
sce.psa <- computeSumFactors(sce.psa, cluster = clusters)
sce.psa <- logNormCounts(sce.psa)
sce.psa
set.seed(100)
clusters <- quickCluster(sce.psa)
sce.psa <- computeSumFactors(sce.psa, cluster = clusters)
sce.psa <- logNormCounts(sce.psa)
sce.psa
set.seed(10000)
sce.psa <- denoisePCA(sce.psa,
subset.row = top.bmcell,
technical = dec.bmcell
)
set.seed(100)
dec.bmcell <- modelGeneVarByPoisson(sce.psa)
top.bmcell <- getTopHVGs(dec.bmcell, prop = 0.1)
set.seed(10000)
sce.psa <- denoisePCA(sce.psa,
subset.row = top.bmcell,
technical = dec.bmcell
)
set.seed(100000)
sce.psa <- runTSNE(sce.psa, dimred = "PCA")
set.seed(1000000)
sce.psa <- runUMAP(sce.psa, dimred = "PCA")
g <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA")
# Identificar comunidades utilizando el método Walktrap
clust <- igraph::cluster_walktrap(g)$membership
g2 <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA", type = "jaccard")
clust2 <- igraph::cluster_louvain(g2)$membership
library("patchwork")
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_walktrap(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster")
sce.psa$cluster <- factor(clust)
sce.psa$cluster2 <- factor(clust2)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA")
clust.full <- igraph::cluster_walktrap(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "HLA-DQA2", "CCL3", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster") +
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
sce.psa <- DropletUtils::read10xCounts("data_t")
sce.psa
# Anotación: Se cambia los nombre de los genes, es decir, MIR1302-2HG en vez de ENSG00000243485
rownames(sce.psa) <- uniquifyFeatureNames(rowData(sce.psa)$ID, rowData(sce.psa)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86, keys = rowData(sce.psa)$ID, column = "SEQNAME", keytype = "GENEID")
# Quality-control: Se usa para calcular métricas de calidad celular, detectar y eliminar
#células atípicas basadas en la expresión génica mitocondrial en un
#conjunto de datos de scRNA-seq.
stats <- perCellQCMetrics(sce.psa, subsets = list(Mito = which(location == "MT")))
high.mito <- isOutlier(stats$subsets_Mito_percent, type = "higher")
sce.psa <- sce.psa[, !high.mito]
sce.psa
# Normalización: Para el preprocesamiento y análisis de datos de scRNA-seq. Se calculan
#los factores de suma para normalizar los datos y se aplica una
#transformación logarítmica a los recuentos normalizados.
set.seed(100)
clusters <- quickCluster(sce.psa)
sce.psa <- computeSumFactors(sce.psa, cluster = clusters)
sce.psa <- logNormCounts(sce.psa)
sce.psa
# variance modelling: para identificar los genes altamente variables en un conjunto de datos
#de scRNA-seq. Primero, se ajusta un modelo de regresión de Poisson para
#modelar la relación entre la media y la varianza de la expresión génica.
#Luego, se seleccionan los genes más altamente variables basados en la
#proporción especificada. La identificación de HVGs es un paso común en
#el análisis de datos de scRNA-seq para identificar genes que muestran
#variabilidad significativa entre diferentes células.
set.seed(100)
dec.bmcell <- modelGeneVarByPoisson(sce.psa)
top.bmcell <- getTopHVGs(dec.bmcell, prop = 0.1)
# Dimensionality-reduction: En este paso se elimina el ruido técnico mediante PCA, seguido de la
#visualización de las células en un espacio de menor dimensión utilizando
#t-SNE y UMAP.
set.seed(10000)
sce.psa <- denoisePCA(sce.psa,
subset.row = top.bmcell,
technical = dec.bmcell
)
set.seed(100000)
sce.psa <- runTSNE(sce.psa, dimred = "PCA")
set.seed(1000000)
sce.psa <- runUMAP(sce.psa, dimred = "PCA")
# Construir grafo usando k= 10 vecinos más cercanos en el espacio definido por el PCA
g <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA")
# Identificar comunidades utilizando el método Walktrap
clust <- igraph::cluster_walktrap(g)$membership
sce.psa$cluster <- factor(clust)
# Visualización
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster")
# Pesos definidos estilo Jaccard seguidos por clustering de Louvain
# aka 'clustering estilo Seurat'
g2 <- buildSNNGraph(sce.psa, k = 10, use.dimred = "PCA", type = "jaccard")
# Identificar comunidades utilizando el método Walktrap
clust2 <- igraph::cluster_louvain(g2)$membership
sce.psa$cluster2 <- factor(clust2)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2")
g.full <- buildSNNGraph(sce.psa, use.dimred = "PCA", type = "jaccard")
clust.full <- igraph::cluster_louvain(g.full)$membership
sce.psa$clust.full <- factor(clust.full)
plotReducedDim(sce.psa, "TSNE", colour_by = "cluster2") +
plotExpression(sce.psa,
features = c("CD8A", "CD4", "HLA-DRA", "CTLA4", "KLRB1", "GZMB", "IFNG", "GNLY", "ITGA4", "ITGB7", "FOXP3", "RORC", "IL2RA", "CCR6", "IGF1R", "IGF2R"),
x = "clust.full", colour_by = "clust.full"
)
plot(cars)
setwd("~/Desktop/PROJECTES/Pablo_scRNA/test/filtered_gene_bc_matrices")
pbmc.data <- Read10X(data.dir = "/hg19/")
library(dplyr)
library(Seurat)
library(patchwork)
pbmc.data <- Read10X(data.dir = "/hg19/")
pbmc.data <- Read10X(data.dir = "hg19/")
# Initialize the Seurat object with the raw data (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
plot(cars)
